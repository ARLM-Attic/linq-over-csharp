<#@ template language="C#" hostspecific="True" debug="True" #>
<#@ output extension="cs" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
//
// WARNING! This file is generated, do not modify it manually!
//
// Generated on: <#WriteLine(DateTime.Now.ToString());#>
//
// The template file is BlankSyntaxNodeVisitor.tt 
//

// disable warnings about missing XML comments
#pragma warning disable 1591 

namespace CSharpTreeBuilder.Ast
{
  // ================================================================================================
  /// <summary>
  /// An implementation of ISyntaxNodeVisitor that implements every method as an empty virtual function.
  /// Subclass this class if you want to create a SyntaxNodeVisitor that only handles some syntax node types.
  /// This way you can avoid creating lots af method implementations that do nothing.
  /// </summary>
  // ================================================================================================
  public class BlankSyntaxNodeVisitor : ISyntaxNodeVisitor
  {
<#
	string locDrive = Environment.GetEnvironmentVariable("LOCDrive") ?? @"C:\";
    if (!locDrive.EndsWith(@"\")) { locDrive += @"\"; }
	string locPath = Environment.GetEnvironmentVariable("LOCPath") ?? @"Work\LINQOverCSharp\CSharpFactoryVS2010";
    string workingDir =  Path.Combine(Path.Combine(locDrive, locPath), @"CSharpTreeBuilder\CSharpAst");
	
	string[] filenameList = Directory.GetFiles(workingDir, "*Node.cs", SearchOption.AllDirectories);

	List<string> ignoredTypeNames = new List<string>();
	using (StreamReader streamReader = new StreamReader(Path.Combine(workingDir, @"SyntaxNode_ignore.txt")))
	{
		while (!streamReader.EndOfStream)
		{
			ignoredTypeNames.Add(streamReader.ReadLine().Trim());
		}
	}

	foreach (string filename in filenameList)
	{
		int pathEndIndex = filename.LastIndexOf('\\');
		if (pathEndIndex >= 0)
		{
			string typeName = filename.Substring(pathEndIndex + 1, filename.Length - pathEndIndex - 4);
			if (!ignoredTypeNames.Contains(typeName))
			{
				//Debug.WriteLine(typeName);
				WriteLine("    public virtual bool Visit({0} node) {{ return true; }}", typeName);
			}
		}
	}
#>
  }
}
#pragma warning restore 1591