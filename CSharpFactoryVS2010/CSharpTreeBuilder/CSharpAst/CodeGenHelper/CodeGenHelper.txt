<#+
//
// Helper class for T4 code generator templates
//
public static class CodeGenHelper
{
  //
  // Returns all SyntaxNode type names (extracted from filenames found in SyntaxNode_filelist.txt)
  // filtered with typenames contained in SyntaxNode_ignore.txt
  // in a sorted list.
  //
  public static SortedList<string,string> GetTypeNameList()
  {
		SortedList<string,string> typeNameList = new SortedList<string,string>();
		List<string> ignoredTypeNames = new List<string>();

		using (StreamReader streamReader = new StreamReader(@"C:\Work\LinqOverCSharp\CSharpFactoryVS2010\CSharpTreeBuilder\CSharpAst\CodeGenHelper\SyntaxNode_ignore.txt"))
		{
			while (!streamReader.EndOfStream)
			{
				ignoredTypeNames.Add(streamReader.ReadLine().Trim());
			}
		}

		using (StreamReader streamReader = new StreamReader(@"C:\Work\LinqOverCSharp\CSharpFactoryVS2010\CSharpTreeBuilder\CSharpAst\CodeGenHelper\SyntaxNode_filelist.txt"))
		{
			while (!streamReader.EndOfStream)
			{
				string line = streamReader.ReadLine();
				int pathEndIndex = line.LastIndexOf('\\');
				if (pathEndIndex >= 0)
				{
					string typeName = line.Substring(pathEndIndex + 1, line.Length - pathEndIndex - 4);
					if (!ignoredTypeNames.Contains(typeName))
					{
						typeNameList.Add(typeName,null);
					}
				}
			}
		}

		return typeNameList;	
  }
}
#>
