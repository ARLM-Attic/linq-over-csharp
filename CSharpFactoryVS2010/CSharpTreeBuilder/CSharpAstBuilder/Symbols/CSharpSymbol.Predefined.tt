<#@ template inherits="Microsoft.VisualStudio.TextTemplating.VSHost.ModelingTextTransformation" language="C#v3.5" debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.dll" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="System.Windows.Forms.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
//
// WARNING! This file is generated, do not modify it manually!
//
// Generated on: <#WriteLine(DateTime.Now.ToString());#>
//
// The template file is BlankSyntaxNodeVisitor.tt 
//

// disable warnings about missing XML comments
#pragma warning disable 1591 

namespace CSharpTreeBuilder.CSharpAstBuilder
{
  // ================================================================================================
  /// <summary>
  /// Static CSharpSymbol definitions
  /// </summary>
  // ================================================================================================
  public partial struct CSharpSymbol
  {
<#
		Dictionary<string, string> exceptions = new Dictionary<string, string>();
		using (StreamReader streamReader = new StreamReader(@"C:\Work\LinqOverCSharp\CSharpFactoryVS2010\CSharpTreeBuilder\CSharpAstBuilder\SymbolTable.Exceptions.txt"))
		{
			while (!streamReader.EndOfStream)
			{
				string line = streamReader.ReadLine().Trim();
				if (string.IsNullOrEmpty(line)) continue;
				string[] parts = line.Split(' ');
				if (parts.Length > 2) exceptions.Add(parts[0], parts[2]);
			}
		}
		
		using (StreamReader streamReader = new StreamReader(@"C:\Work\LinqOverCSharp\CSharpFactoryVS2010\CSharpTreeBuilder\CSharpAstBuilder\Generated\SymbolTable.Generated.txt"))
		{
			// --- Skip the top 4 lines, as they are headers
			for (int i = 0; i < 4; i++)
				streamReader.ReadLine();
			var nonTerminalFound = false;
			var isFirst = true;
			while (!streamReader.EndOfStream && !nonTerminalFound)
			{
				// --- Each line represents a non-terminal
				var line = streamReader.ReadLine();
				var tokenId = Int32.Parse(line.Substring(0, 3));
				string tokenValue = line.Substring(4, 14).Trim();
				if (tokenValue.StartsWith("\"")) tokenValue = tokenValue.Substring(1);
				if (tokenValue.EndsWith("\"")) 
					tokenValue = tokenValue.Remove(tokenValue.Length - 1);
				string subst;
				if (exceptions.TryGetValue(tokenValue, out subst))
					tokenValue = subst;
				var type = line.Substring(19, 1);
				nonTerminalFound = type != "t";
				if (tokenId < 6 || tokenValue == "???" || nonTerminalFound) continue;
				tokenValue = tokenValue.Substring(0, 1).ToUpper() + tokenValue.Substring(1);
				if (!isFirst) WriteLine("");
				Write("    public static CSharpSymbol {0} = new CSharpSymbol({1});", 
				tokenValue, tokenId);
				isFirst = false;
			}
		}
#>	
  }
}

#pragma warning restore 1591
